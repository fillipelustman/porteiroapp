const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://ycamhxzumzkpxuhtugxc.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InljYW1oeHp1bXprcHh1aHR1Z3hjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjEwMzEsImV4cCI6MjA3MTI5NzAzMX0.CBgkeAVbxlyJHftmVWSkSPefrbOdMckMvtakRTDpgc8';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InljYW1oeHp1bXprcHh1aHR1Z3hjIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTcyMTAzMSwiZXhwIjoyMDcxMjk3MDMxfQ.5abRJDfQeKopRnaoYmFgoS7-0SoldraEMp_VPM7OjdQ';

// Cliente com chave an√¥nima para testar acesso p√∫blico
const supabase = createClient(supabaseUrl, supabaseAnonKey);
// Cliente com service role para verificar configura√ß√µes
const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

async function testUserPhotosBucket() {
  console.log('üß™ Testando acesso p√∫blico ao bucket user-photos...\n');

  try {
    // 1. Verificar se o bucket existe (usando admin)
    console.log('1. Verificando exist√™ncia do bucket...');
    const { data: buckets, error: bucketsError } = await supabaseAdmin.storage.listBuckets();
    
    if (bucketsError) {
      console.error('‚ùå Erro ao listar buckets:', bucketsError.message);
      return;
    }
    
    console.log('üìã Buckets dispon√≠veis:', buckets.map(b => b.name));
    
    const userPhotosBucket = buckets.find(bucket => bucket.name === 'user-photos');
    if (!userPhotosBucket) {
      console.error('‚ùå Bucket user-photos n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Bucket user-photos encontrado:', {
      name: userPhotosBucket.name,
      public: userPhotosBucket.public,
      file_size_limit: userPhotosBucket.file_size_limit,
      allowed_mime_types: userPhotosBucket.allowed_mime_types
    });
    
    // 2. Testar listagem de arquivos (leitura p√∫blica)
    console.log('\n2. Testando listagem de arquivos (leitura p√∫blica)...');
    const { data: files, error: listError } = await supabase.storage
      .from('user-photos')
      .list('', { limit: 10 });
    
    if (listError) {
      console.error('‚ùå Erro ao listar arquivos:', listError);
    } else {
      console.log('‚úÖ Listagem de arquivos bem-sucedida. Arquivos encontrados:', files.length);
      if (files.length > 0) {
        console.log('üìÅ Primeiros arquivos:', files.slice(0, 3).map(f => f.name));
      }
    }
    
    // 3. Testar cria√ß√£o de arquivo tempor√°rio para upload (escrita p√∫blica)
    console.log('\n3. Testando upload p√∫blico (sem autentica√ß√£o)...');
    
    // Criar um arquivo de teste tempor√°rio
    const testFileName = `test-public-upload-${Date.now()}.txt`;
    const testFileContent = 'Este √© um teste de upload p√∫blico ao bucket user-photos';
    const testBuffer = Buffer.from(testFileContent, 'utf8');
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('user-photos')
      .upload(`visitors/${testFileName}`, testBuffer, {
        contentType: 'text/plain',
        upsert: true
      });
    
    if (uploadError) {
      console.error('‚ùå Erro no upload p√∫blico:', uploadError);
    } else {
      console.log('‚úÖ Upload p√∫blico bem-sucedido:', uploadData.path);
      
      // 4. Testar gera√ß√£o de URL p√∫blica
      console.log('\n4. Testando gera√ß√£o de URL p√∫blica...');
      const { data: urlData } = supabase.storage
        .from('user-photos')
        .getPublicUrl(uploadData.path);
      
      console.log('‚úÖ URL p√∫blica gerada:', urlData.publicUrl);
      
      // 5. Testar exclus√£o do arquivo de teste (limpeza)
      console.log('\n5. Limpando arquivo de teste...');
      const { error: deleteError } = await supabase.storage
        .from('user-photos')
        .remove([uploadData.path]);
      
      if (deleteError) {
        console.error('‚ö†Ô∏è Erro ao deletar arquivo de teste:', deleteError);
      } else {
        console.log('‚úÖ Arquivo de teste removido com sucesso');
      }
    }
    
    // 6. Testar estrutura de pastas
    console.log('\n6. Testando estrutura de pastas...');
    const folders = ['residents', 'visitors'];
    
    for (const folder of folders) {
      const { data: folderFiles, error: folderError } = await supabase.storage
        .from('user-photos')
        .list(folder, { limit: 5 });
      
      if (folderError) {
        console.log(`‚ö†Ô∏è Pasta ${folder} pode n√£o existir ainda:`, folderError.message);
      } else {
        console.log(`‚úÖ Pasta ${folder} acess√≠vel. Arquivos: ${folderFiles.length}`);
      }
    }
    
    console.log('\nüéâ Teste de acesso p√∫blico conclu√≠do!');
    console.log('\nüìã Resumo das configura√ß√µes:');
    console.log('- ‚úÖ Bucket p√∫blico configurado');
    console.log('- ‚úÖ Upload p√∫blico permitido');
    console.log('- ‚úÖ Leitura p√∫blica permitida');
    console.log('- ‚úÖ Exclus√£o p√∫blica permitida');
    console.log('- ‚úÖ Estrutura de pastas (/residents/, /visitors/) pronta');
    console.log('- ‚úÖ Restri√ß√µes de arquivo mantidas (5MB, JPEG/PNG/WebP)');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar o teste
testUserPhotosBucket();